{"ast":null,"code":"var _s = $RefreshSig$();\n// ViewApplicants.js\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport NavbarProducer from '../../components/navbar/NavbarProducer';\nimport styles from './ViewApplicants.module.css';\nimport { useParams } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewApplicants = () => {\n  _s();\n  const {\n    jobId\n  } = useParams();\n  console.log(jobId);\n  const [applicants, setApplicants] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState({});\n  useEffect(() => {\n    const fetchApplicants = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8001/jobs/applied?jobId=${jobId}`, {\n          withCredentials: true\n        });\n        const {\n          success,\n          data,\n          message\n        } = response.data;\n        if (success) {\n          setApplicants(data);\n        } else {\n          setError(message);\n        }\n      } catch (error) {\n        console.error('Error fetching applicants:', error);\n        setError('An error occurred while fetching applicants.');\n      }\n    };\n    fetchApplicants();\n  }, [jobId]);\n\n  // const handleAccept = async (applicantId) => {\n  //   // Implement the logic to accept the applicant with the given ID\n  //   try {\n  //     const response = await axios.post(`http://localhost:8001/jobs/acceptapplicant/${applicantId}`, {\n  //       withCredentials: true,\n  //     });\n\n  //     const { success, message } = response.data;\n\n  //     if (success) {\n  //       // Refresh the list of applicants after accepting\n  //       fetchApplicants();\n  //       console.log(message);\n  //     } else {\n  //       console.error(message);\n  //     }\n  //   } catch (error) {\n  //     console.error('Error accepting applicant:', error);\n  //   }\n  // };\n\n  // const handleReject = async (applicantId) => {\n  //   // Implement the logic to reject the applicant with the given ID\n  //   try {\n  //     const response = await axios.post(`http://localhost:8001/jobs/rejectapplicant/${applicantId}`, {\n  //       withCredentials: true,\n  //     });\n\n  //     const { success, message } = response.data;\n\n  //     if (success) {\n  //       // Refresh the list of applicants after rejecting\n  //       fetchApplicants();\n  //       console.log(message);\n  //     } else {\n  //       console.error(message);\n  //     }\n  //   } catch (error) {\n  //     console.error('Error rejecting applicant:', error);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(ViewApplicants, \"XHgvJnOldOivl/2RffAMPou6KHc=\", false, function () {\n  return [useParams];\n});\n_c = ViewApplicants;\nexport default ViewApplicants;\nvar _c;\n$RefreshReg$(_c, \"ViewApplicants\");","map":{"version":3,"names":["React","useEffect","useState","axios","NavbarProducer","styles","useParams","Fragment","_Fragment","jsxDEV","_jsxDEV","ViewApplicants","_s","jobId","console","log","applicants","setApplicants","error","setError","status","setStatus","fetchApplicants","response","get","withCredentials","success","data","message","_c","$RefreshReg$"],"sources":["D:/Gyanshu/webd/projects/retrocraft-hub/frontend/src/pages/applicants/ViewApplicants.js"],"sourcesContent":["// ViewApplicants.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport NavbarProducer from '../../components/navbar/NavbarProducer';\r\nimport styles from './ViewApplicants.module.css';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst ViewApplicants = () => {\r\n  const { jobId } = useParams();\r\n  console.log(jobId);\r\n  const [applicants, setApplicants] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [status, setStatus] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchApplicants = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8001/jobs/applied?jobId=${jobId}`, {\r\n          withCredentials: true,\r\n        });\r\n\r\n        const { success, data, message } = response.data;\r\n\r\n        if (success) {\r\n          setApplicants(data);\r\n        } else {\r\n          setError(message);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching applicants:', error);\r\n        setError('An error occurred while fetching applicants.');\r\n      }\r\n    };\r\n\r\n    fetchApplicants();\r\n  }, [jobId]);\r\n\r\n  // const handleAccept = async (applicantId) => {\r\n  //   // Implement the logic to accept the applicant with the given ID\r\n  //   try {\r\n  //     const response = await axios.post(`http://localhost:8001/jobs/acceptapplicant/${applicantId}`, {\r\n  //       withCredentials: true,\r\n  //     });\r\n\r\n  //     const { success, message } = response.data;\r\n\r\n  //     if (success) {\r\n  //       // Refresh the list of applicants after accepting\r\n  //       fetchApplicants();\r\n  //       console.log(message);\r\n  //     } else {\r\n  //       console.error(message);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error('Error accepting applicant:', error);\r\n  //   }\r\n  // };\r\n\r\n  // const handleReject = async (applicantId) => {\r\n  //   // Implement the logic to reject the applicant with the given ID\r\n  //   try {\r\n  //     const response = await axios.post(`http://localhost:8001/jobs/rejectapplicant/${applicantId}`, {\r\n  //       withCredentials: true,\r\n  //     });\r\n\r\n  //     const { success, message } = response.data;\r\n\r\n  //     if (success) {\r\n  //       // Refresh the list of applicants after rejecting\r\n  //       fetchApplicants();\r\n  //       console.log(message);\r\n  //     } else {\r\n  //       console.error(message);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error('Error rejecting applicant:', error);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <>\r\n    </>\r\n     \r\n  );\r\n};\r\n\r\nexport default ViewApplicants;\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,wCAAwC;AACnE,OAAOC,MAAM,MAAM,6BAA6B;AAChD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAM,CAAC,GAAGP,SAAS,CAAC,CAAC;EAC7BQ,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMqB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAAE,4CAA2CX,KAAM,EAAC,EAAE;UACpFY,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,MAAM;UAAEC,OAAO;UAAEC,IAAI;UAAEC;QAAQ,CAAC,GAAGL,QAAQ,CAACI,IAAI;QAEhD,IAAID,OAAO,EAAE;UACXT,aAAa,CAACU,IAAI,CAAC;QACrB,CAAC,MAAM;UACLR,QAAQ,CAACS,OAAO,CAAC;QACnB;MACF,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDC,QAAQ,CAAC,8CAA8C,CAAC;MAC1D;IACF,CAAC;IAEDG,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACT,KAAK,CAAC,CAAC;;EAEX;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEH,OAAA,CAAAF,SAAA,mBACE,CAAC;AAGP,CAAC;AAACI,EAAA,CA7EID,cAAc;EAAA,QACAL,SAAS;AAAA;AAAAuB,EAAA,GADvBlB,cAAc;AA+EpB,eAAeA,cAAc;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}