{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\Good Projects\\\\retrocraft-hub\\\\frontend\\\\src\\\\pages\\\\jobs\\\\Jobs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"../../components/navbar/NavbarFreelancer\";\nimport styles from \"./Jobs.module.css\";\nimport { FilterList } from \"@mui/icons-material\";\nimport { Button, Dialog, DialogTitle, IconButton, DialogContent, Slider } from \"@mui/material\";\nimport { FormControl, InputLabel, MenuItem, Select, TextField, Typography } from \"@mui/material\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Footer from \"../../components/Footer/Footer\";\nimport noData from \"../../assets/images/home/nodata.jpg\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Jobs = () => {\n  _s();\n  const [profileData, setProfileData] = useState({});\n  const [jobs, setJobs] = useState([]);\n  const [appliedJobs, setAppliedJobs] = useState([]);\n  const [filterLocation, setFilterLocation] = useState(null);\n  const [filterJobType, setFilterJobType] = useState(null);\n  const [filterDuration, setFilterDuration] = useState([1, 12]);\n  const [filterSalary, setFilterSalary] = useState([10000, 100000]);\n  const [filterVisible, setFilterVisible] = useState(false);\n  const [filterTitle, setFilterTitle] = useState(\"\");\n  const [sopText, setSopText] = useState(\"\"); // New state for SOP text\n  const [sopDialogVisible, setSopDialogVisible] = useState(false); // State to control SOP dialog visibility\n  const [jobAppliedStatus, setJobAppliedStatus] = useState({});\n  const [sopJobIndex, setSopJobIndex] = useState(null);\n\n  // Set jobAppliedStatus state with data from localStorage when component mounts\n  useEffect(() => {\n    // Retrieve jobAppliedStatus from localStorage\n    const storedJobAppliedStatus = JSON.parse(localStorage.getItem(\"jobAppliedStatus\")) || {};\n\n    // Set the jobAppliedStatus state\n    setJobAppliedStatus(storedJobAppliedStatus);\n  }, []); // Empty dependency array ensures this runs only once when component mounts\n\n  // Fetch jobs from the database when the component mounts or when filters change\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        const token = sessionStorage.getItem(\"token\");\n        const response = await axios.get(\"http://localhost:8001/jobs/getjobs\", {\n          params: {\n            jobType: filterJobType,\n            duration: filterDuration,\n            salary: filterSalary,\n            title: filterTitle,\n            location: filterLocation\n          },\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          withCredentials: true\n        });\n        const jobsData = response.data;\n        if (Array.isArray(jobsData.jobs)) {\n          // Retrieve the current jobAppliedStatus from localStorage\n          const storedJobAppliedStatus = JSON.parse(localStorage.getItem(\"jobAppliedStatus\")) || {};\n\n          // Update jobs array to include applied status\n          const jobsWithAppliedStatus = jobsData.jobs.map(job => ({\n            ...job,\n            isApplied: job._id in storedJobAppliedStatus ? storedJobAppliedStatus[job._id] : false\n          }));\n\n          // Update jobs array with the applied status\n          setJobs(jobsWithAppliedStatus);\n          // Save the updated jobs array to localStorage\n          localStorage.setItem(\"jobs\", JSON.stringify(jobsWithAppliedStatus));\n\n          // Initialize jobAppliedStatus with the stored data from localStorage\n          setJobAppliedStatus(storedJobAppliedStatus);\n        } else {\n          console.error(\"Invalid data received from the API:\", jobsData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching applied jobs:\", error.response || error);\n      }\n    };\n    fetchJobs();\n  }, [filterDuration, filterJobType, filterLocation, filterSalary, filterTitle]);\n  const handleApply = async jobIndex => {\n    // Check if the job is in the applied jobs list\n    const job = jobs[jobIndex];\n    const isApplied = appliedJobs.some(appliedJob => appliedJob._id === job._id);\n\n    // If the job is not already applied for, update the applied status and open the SOP dialog\n    if (!isApplied) {\n      setJobAppliedStatus(prevStatus => {\n        const updatedStatus = {\n          ...prevStatus,\n          [job._id]: true // Use job._id as the key for jobAppliedStatus\n        };\n\n        // Update the jobs state\n        setJobs(prevJobs => {\n          const updatedJobs = [...prevJobs];\n          updatedJobs[jobIndex] = {\n            ...updatedJobs[jobIndex],\n            isApplied: true\n          };\n          return updatedJobs;\n        });\n        return updatedStatus;\n      });\n      setSopDialogVisible(true);\n      setSopJobIndex(jobIndex);\n    }\n  };\n  const handleApplySop = async () => {\n    try {\n      // Close the SOP dialog\n      setSopDialogVisible(false);\n\n      // Get the job index for which the user is applying\n      const jobIndex = sopJobIndex;\n      const token = sessionStorage.getItem(\"token\");\n\n      // Apply for the job\n      const response = await axios.post(\"http://localhost:8001/jobs/apply\", {\n        sopText: sopText,\n        jobId: jobs[jobIndex]._id\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        withCredentials: true\n      });\n\n      // If the request was successful, update the applied status for the corresponding job\n      if (response.status === 200) {\n        const jobId = jobs[jobIndex]._id;\n        // Update the applied jobs list\n        setAppliedJobs(prevJobs => [...prevJobs, jobs[jobIndex]]);\n\n        // Update the applied status for the corresponding job\n        setJobAppliedStatus(prevStatus => {\n          const updatedStatus = {\n            ...prevStatus,\n            [jobId]: true\n          };\n\n          // Store the updated applied status in localStorage\n          localStorage.setItem(\"jobAppliedStatus\", JSON.stringify(updatedStatus));\n\n          // Return the updated status to update the state\n          return updatedStatus;\n        });\n\n        // This will update the button text from \"Apply\" to \"Applied\"\n        setJobs(prevJobs => {\n          const updatedJobs = [...prevJobs];\n          updatedJobs[jobIndex].isApplied = true;\n          return updatedJobs;\n        });\n      } else {\n        console.error(\"Job application failed:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error applying for job:\", error);\n    }\n  };\n  useEffect(() => {\n    const fetchProfileData = async () => {\n      const token = sessionStorage.getItem(\"token\");\n      try {\n        // Fetch jobs\n        const response = await axios.get(\"http://localhost:8001/jobs/getjobs\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          withCredentials: true\n        });\n        const jobsData = response.data;\n        if (Array.isArray(jobsData.jobs)) {\n          setJobs(jobsData.jobs);\n\n          // Fetch profile data for each job's producer\n          const profileData = {};\n          for (const job of jobsData.jobs) {\n            const userId = job.userId;\n            const {\n              data\n            } = await axios.get(`http://localhost:8001/profile/getproducerprofile/${userId}`, {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            }, {\n              withCredentials: true\n            });\n            const {\n              success,\n              profile\n            } = data;\n            if (success) {\n              profileData[userId] = profile;\n            } else {\n              console.error(\"Failed to fetch profile data:\", data);\n            }\n          }\n          setProfileData(profileData);\n        } else {\n          console.error(\"Invalid data received from the API:\", jobsData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchProfileData();\n  }, []);\n  const handleApplyFilters = () => {\n    setFilterVisible(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.Jobs,\n      children: jobs.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterIconContainer,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => setFilterVisible(true),\n            className: styles.filterIcon,\n            children: /*#__PURE__*/_jsxDEV(FilterList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.cardsContainer,\n          children: jobs && jobs.map((job, index) => {\n            const userId = job.userId;\n            const isApplied = appliedJobs.some(appliedJob => appliedJob._id === job._id);\n            const formattedLocation = job && job.location ? job.location.replace(/([a-z])([A-Z])/g, \"$1 $2\") : \"\";\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.jobCards,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.photoWrapper,\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: profileData && profileData[userId] && profileData[userId].profileImage ? `http://localhost:8001/${profileData[userId].profileImage.replace(/\\\\/g, \"/\")}` : \"\",\n                  alt: \"Profile\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: styles.by,\n                  children: [\" \", \"-\", profileData[userId] && profileData[userId].username, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.jobSpecs,\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: styles.title,\n                  children: [\" \", job.title]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Available Positions :\", job.positionsAvailable]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: styles.specs,\n                  children: [\"Skills Required:\", \" \", job.skills.map((skill, index) => /*#__PURE__*/_jsxDEV(Chip, {\n                    label: skill,\n                    className: styles.chip\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 29\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 25\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Job Type : \", job.jobType]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Duration : \", job.duration]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Salary : \", job.salary]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Location :\", formattedLocation]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `${styles.apply} ${isApplied ? styles.appliedButton : \"\"}`,\n                  onClick: () => handleApply(index),\n                  disabled: job.isApplied,\n                  children: job.isApplied ? \"Applied\" : \"Apply\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: filterVisible,\n          onClose: () => setFilterVisible(false),\n          className: styles.dialogContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.filterContainer,\n            children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n              children: \"Filter Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n              className: styles.dialogContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                className: styles.formElement,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  htmlFor: \"filterLocation\",\n                  children: \"Select Location Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"filterLocation-label\",\n                  id: \"filterLocation\",\n                  value: filterLocation || \"\",\n                  onChange: e => setFilterLocation(e.target.value),\n                  label: \"Select Location\",\n                  children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"\",\n                    children: \"All\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"onSite\",\n                    children: \"On Site\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 358,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"workFromHome\",\n                    children: \"Work From Home\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 359,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"Job Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                className: styles.formElement,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  htmlFor: \"filterJobType\",\n                  children: \"Select Job Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"filterJobType-label\",\n                  id: \"filterJobType\",\n                  value: filterJobType || \"\",\n                  onChange: e => setFilterJobType(e.target.value),\n                  label: \"Select Job Type\",\n                  children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"\",\n                    children: \"All\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 376,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"fullTime\",\n                    children: \"Full Time\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 377,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"partTime\",\n                    children: \"Part Time\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"contract\",\n                    children: \"Contract\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 379,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"Salary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.sliderContainer,\n                children: /*#__PURE__*/_jsxDEV(Slider, {\n                  value: filterSalary,\n                  onChange: (event, newValue) => setFilterSalary(newValue),\n                  valueLabelDisplay: \"auto\",\n                  min: 10000,\n                  max: 100000,\n                  step: 10000\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"Duration\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.sliderContainer,\n                children: /*#__PURE__*/_jsxDEV(Slider, {\n                  value: filterDuration,\n                  onChange: (event, newValue) => setFilterDuration(newValue),\n                  valueLabelDisplay: \"auto\",\n                  min: 1,\n                  max: 12,\n                  step: 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.formElement,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Select Title\",\n                  select: true,\n                  value: filterTitle || \"\",\n                  onChange: e => setFilterTitle(e.target.value),\n                  variant: \"outlined\",\n                  fullWidth: true,\n                  children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"\",\n                    children: \"All\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 422,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"Video Editor\",\n                    children: \"Video Editor\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 423,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"Graphic Designer\",\n                    children: \"Designer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 424,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"Sound Engineer\",\n                    children: \"Sound Engineer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 425,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.applyButtonContainer,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: handleApplyFilters,\n              children: \"Apply\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: sopDialogVisible,\n          onClose: () => setSopDialogVisible(false),\n          className: styles.dialogContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.filterContainer,\n            children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n              children: \"Write Your Statement of Purpose (SOP)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n              className: styles.dialogContent,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                label: \"SOP\",\n                multiline: true,\n                rows: 4,\n                variant: \"outlined\",\n                fullWidth: true,\n                value: sopText,\n                onChange: e => setSopText(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.applyButtonContainer,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              className: styles.sop,\n              onClick: handleApplySop,\n              children: \"Apply\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: noData,\n        className: styles.noData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Jobs, \"HGV2CZnR1n/2iT7JszMnB2hk5Zs=\");\n_c = Jobs;\nexport default Jobs;\nvar _c;\n$RefreshReg$(_c, \"Jobs\");","map":{"version":3,"names":["React","useEffect","useState","axios","Navbar","styles","FilterList","Button","Dialog","DialogTitle","IconButton","DialogContent","Slider","FormControl","InputLabel","MenuItem","Select","TextField","Typography","Chip","Footer","noData","jsxDEV","_jsxDEV","Fragment","_Fragment","Jobs","_s","profileData","setProfileData","jobs","setJobs","appliedJobs","setAppliedJobs","filterLocation","setFilterLocation","filterJobType","setFilterJobType","filterDuration","setFilterDuration","filterSalary","setFilterSalary","filterVisible","setFilterVisible","filterTitle","setFilterTitle","sopText","setSopText","sopDialogVisible","setSopDialogVisible","jobAppliedStatus","setJobAppliedStatus","sopJobIndex","setSopJobIndex","storedJobAppliedStatus","JSON","parse","localStorage","getItem","fetchJobs","token","sessionStorage","response","get","params","jobType","duration","salary","title","location","headers","Authorization","withCredentials","jobsData","data","Array","isArray","jobsWithAppliedStatus","map","job","isApplied","_id","setItem","stringify","console","error","handleApply","jobIndex","some","appliedJob","prevStatus","updatedStatus","prevJobs","updatedJobs","handleApplySop","post","jobId","status","fetchProfileData","userId","success","profile","handleApplyFilters","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","filterIconContainer","onClick","filterIcon","cardsContainer","index","formattedLocation","replace","jobCards","photoWrapper","src","profileImage","alt","by","username","jobSpecs","positionsAvailable","specs","skills","skill","label","chip","apply","appliedButton","disabled","open","onClose","dialogContainer","filterContainer","dialogContent","variant","formElement","htmlFor","labelId","id","value","onChange","e","target","sliderContainer","event","newValue","valueLabelDisplay","min","max","step","select","fullWidth","applyButtonContainer","color","multiline","rows","sop","_c","$RefreshReg$"],"sources":["D:/Development/Good Projects/retrocraft-hub/frontend/src/pages/jobs/Jobs.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Navbar from \"../../components/navbar/NavbarFreelancer\";\r\nimport styles from \"./Jobs.module.css\";\r\nimport { FilterList } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  IconButton,\r\n  DialogContent,\r\n  Slider,\r\n} from \"@mui/material\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport noData from \"../../assets/images/home/nodata.jpg\";\r\n\r\nconst Jobs = () => {\r\n  const [profileData, setProfileData] = useState({});\r\n  const [jobs, setJobs] = useState([]);\r\n  const [appliedJobs, setAppliedJobs] = useState([]);\r\n  const [filterLocation, setFilterLocation] = useState(null);\r\n  const [filterJobType, setFilterJobType] = useState(null);\r\n  const [filterDuration, setFilterDuration] = useState([1, 12]);\r\n  const [filterSalary, setFilterSalary] = useState([10000, 100000]);\r\n  const [filterVisible, setFilterVisible] = useState(false);\r\n  const [filterTitle, setFilterTitle] = useState(\"\");\r\n  const [sopText, setSopText] = useState(\"\"); // New state for SOP text\r\n  const [sopDialogVisible, setSopDialogVisible] = useState(false); // State to control SOP dialog visibility\r\n  const [jobAppliedStatus, setJobAppliedStatus] = useState({});\r\n  const [sopJobIndex, setSopJobIndex] = useState(null);\r\n\r\n  // Set jobAppliedStatus state with data from localStorage when component mounts\r\n  useEffect(() => {\r\n    // Retrieve jobAppliedStatus from localStorage\r\n    const storedJobAppliedStatus =\r\n      JSON.parse(localStorage.getItem(\"jobAppliedStatus\")) || {};\r\n\r\n    // Set the jobAppliedStatus state\r\n    setJobAppliedStatus(storedJobAppliedStatus);\r\n  }, []); // Empty dependency array ensures this runs only once when component mounts\r\n\r\n  \r\n  // Fetch jobs from the database when the component mounts or when filters change\r\n  useEffect(() => {\r\n    const fetchJobs = async () => {\r\n      try {\r\n        const token = sessionStorage.getItem(\"token\");\r\n\r\n        const response = await axios.get(\"http://localhost:8001/jobs/getjobs\", {\r\n          params: {\r\n            jobType: filterJobType,\r\n            duration: filterDuration,\r\n            salary: filterSalary,\r\n            title: filterTitle,\r\n            location: filterLocation,\r\n          },\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          withCredentials: true,\r\n        });\r\n\r\n        const jobsData = response.data;\r\n\r\n        if (Array.isArray(jobsData.jobs)) {\r\n          // Retrieve the current jobAppliedStatus from localStorage\r\n          const storedJobAppliedStatus =\r\n            JSON.parse(localStorage.getItem(\"jobAppliedStatus\")) || {};\r\n\r\n         \r\n\r\n          // Update jobs array to include applied status\r\n          const jobsWithAppliedStatus = jobsData.jobs.map((job) => ({\r\n            ...job,\r\n            isApplied:\r\n              job._id in storedJobAppliedStatus\r\n                ? storedJobAppliedStatus[job._id]\r\n                : false,\r\n          }));\r\n\r\n          // Update jobs array with the applied status\r\n          setJobs(jobsWithAppliedStatus);\r\n          // Save the updated jobs array to localStorage\r\n          localStorage.setItem(\"jobs\", JSON.stringify(jobsWithAppliedStatus));\r\n\r\n           // Initialize jobAppliedStatus with the stored data from localStorage\r\n           setJobAppliedStatus(storedJobAppliedStatus);\r\n        } else {\r\n          console.error(\"Invalid data received from the API:\", jobsData);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching applied jobs:\", error.response || error);\r\n      }\r\n    };\r\n\r\n    fetchJobs();\r\n  }, [\r\n    filterDuration,\r\n    filterJobType,\r\n    filterLocation,\r\n    filterSalary,\r\n    filterTitle,\r\n  ]);\r\n\r\n  const handleApply = async (jobIndex) => {\r\n    // Check if the job is in the applied jobs list\r\n    const job = jobs[jobIndex];\r\n    const isApplied = appliedJobs.some(\r\n      (appliedJob) => appliedJob._id === job._id\r\n    );\r\n\r\n   // If the job is not already applied for, update the applied status and open the SOP dialog\r\n  if (!isApplied) {\r\n    setJobAppliedStatus((prevStatus) => {\r\n      const updatedStatus = {\r\n        ...prevStatus,\r\n        [job._id]: true, // Use job._id as the key for jobAppliedStatus\r\n      };\r\n\r\n      // Update the jobs state\r\n      setJobs((prevJobs) => {\r\n        const updatedJobs = [...prevJobs];\r\n        updatedJobs[jobIndex] = {\r\n          ...updatedJobs[jobIndex],\r\n          isApplied: true,\r\n        };\r\n        return updatedJobs;\r\n      });\r\n\r\n      return updatedStatus;\r\n    });\r\n    setSopDialogVisible(true);\r\n    setSopJobIndex(jobIndex);\r\n  }\r\n};\r\n\r\n  const handleApplySop = async () => {\r\n    try {\r\n      // Close the SOP dialog\r\n      setSopDialogVisible(false);\r\n\r\n      // Get the job index for which the user is applying\r\n      const jobIndex = sopJobIndex;\r\n      const token = sessionStorage.getItem(\"token\");\r\n\r\n      // Apply for the job\r\n      const response = await axios.post(\r\n        \"http://localhost:8001/jobs/apply\",\r\n        {\r\n          sopText: sopText,\r\n          jobId: jobs[jobIndex]._id,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      // If the request was successful, update the applied status for the corresponding job\r\n      if (response.status === 200) {\r\n        const jobId = jobs[jobIndex]._id;\r\n        // Update the applied jobs list\r\n        setAppliedJobs((prevJobs) => [...prevJobs, jobs[jobIndex]]);\r\n\r\n        // Update the applied status for the corresponding job\r\n        setJobAppliedStatus((prevStatus) => {\r\n          const updatedStatus = { ...prevStatus, [jobId]: true };\r\n        \r\n          // Store the updated applied status in localStorage\r\n          localStorage.setItem(\"jobAppliedStatus\", JSON.stringify(updatedStatus));\r\n        \r\n          // Return the updated status to update the state\r\n          return updatedStatus;\r\n        });\r\n\r\n        // This will update the button text from \"Apply\" to \"Applied\"\r\n        setJobs((prevJobs) => {\r\n          const updatedJobs = [...prevJobs];\r\n          updatedJobs[jobIndex].isApplied = true;\r\n          return updatedJobs;\r\n        });\r\n        \r\n      } else {\r\n        console.error(\"Job application failed:\", response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error applying for job:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchProfileData = async () => {\r\n      const token = sessionStorage.getItem(\"token\");\r\n\r\n      try {\r\n        // Fetch jobs\r\n        const response = await axios.get(\"http://localhost:8001/jobs/getjobs\", {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          withCredentials: true,\r\n        });\r\n\r\n        const jobsData = response.data;\r\n\r\n        if (Array.isArray(jobsData.jobs)) {\r\n          setJobs(jobsData.jobs);\r\n\r\n          // Fetch profile data for each job's producer\r\n          const profileData = {};\r\n          for (const job of jobsData.jobs) {\r\n            const userId = job.userId;\r\n            const { data } = await axios.get(\r\n              `http://localhost:8001/profile/getproducerprofile/${userId}`,\r\n              {\r\n                headers: {\r\n                  Authorization: `Bearer ${token}`,\r\n                },\r\n              },\r\n              { withCredentials: true }\r\n            );\r\n\r\n            const { success, profile } = data;\r\n            if (success) {\r\n              profileData[userId] = profile;\r\n            } else {\r\n              console.error(\"Failed to fetch profile data:\", data);\r\n            }\r\n          }\r\n\r\n          setProfileData(profileData);\r\n        } else {\r\n          console.error(\"Invalid data received from the API:\", jobsData);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchProfileData();\r\n  }, []);\r\n\r\n  const handleApplyFilters = () => {\r\n    setFilterVisible(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className={styles.Jobs}>\r\n        {jobs.length > 0 ? (\r\n          <div>\r\n            <div className={styles.filterIconContainer}>\r\n              <IconButton\r\n                onClick={() => setFilterVisible(true)}\r\n                className={styles.filterIcon}\r\n              >\r\n                <FilterList />\r\n              </IconButton>\r\n            </div>\r\n            <div className={styles.cardsContainer}>\r\n              {jobs &&\r\n                jobs.map((job, index) => {\r\n                  const userId = job.userId;\r\n                  const isApplied = appliedJobs.some(\r\n                    (appliedJob) => appliedJob._id === job._id\r\n                  );\r\n                  const formattedLocation =\r\n                    job && job.location\r\n                      ? job.location.replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                      : \"\";\r\n\r\n                  return (\r\n                    <div key={index} className={styles.jobCards}>\r\n                      <div className={styles.photoWrapper}>\r\n                        <img\r\n                          src={\r\n                            profileData &&\r\n                            profileData[userId] &&\r\n                            profileData[userId].profileImage\r\n                              ? `http://localhost:8001/${profileData[\r\n                                  userId\r\n                                ].profileImage.replace(/\\\\/g, \"/\")}`\r\n                              : \"\"\r\n                          }\r\n                          alt=\"Profile\"\r\n                        />\r\n                        <h3 className={styles.by}>\r\n                          {\" \"}\r\n                          -{profileData[userId] &&\r\n                            profileData[userId].username}{\" \"}\r\n                        </h3>\r\n                      </div>\r\n                      <div className={styles.jobSpecs}>\r\n                        <h3 className={styles.title}> {job.title}</h3>\r\n                        <h3>Available Positions :{job.positionsAvailable}</h3>\r\n                        <h3 className={styles.specs}>\r\n                          Skills Required:{\" \"}\r\n                          {job.skills.map((skill, index) => (\r\n                            <Chip\r\n                              key={index}\r\n                              label={skill}\r\n                              className={styles.chip}\r\n                            />\r\n                          ))}\r\n                        </h3>{\" \"}\r\n                        <h3>Job Type : {job.jobType}</h3>\r\n                        <h3>Duration : {job.duration}</h3>\r\n                        <h3>Salary : {job.salary}</h3>\r\n                        <h3>Location :{formattedLocation}</h3>\r\n                        <button\r\n                          className={`${styles.apply} ${\r\n                            isApplied ? styles.appliedButton : \"\"\r\n                          }`}\r\n                          onClick={() => handleApply(index)}\r\n                          disabled={job.isApplied}\r\n                        >\r\n                          {job.isApplied ? \"Applied\" : \"Apply\"}\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n            {/* Filter Popup */}\r\n            <Dialog\r\n              open={filterVisible}\r\n              onClose={() => setFilterVisible(false)}\r\n              className={styles.dialogContainer}\r\n            >\r\n              <div className={styles.filterContainer}>\r\n                <DialogTitle>Filter Options</DialogTitle>\r\n                <DialogContent className={styles.dialogContent}>\r\n                  <Typography variant=\"h6\">Location</Typography>\r\n                  <FormControl className={styles.formElement}>\r\n                    <InputLabel htmlFor=\"filterLocation\">\r\n                      Select Location Type\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"filterLocation-label\"\r\n                      id=\"filterLocation\"\r\n                      value={filterLocation || \"\"}\r\n                      onChange={(e) => setFilterLocation(e.target.value)}\r\n                      label=\"Select Location\"\r\n                    >\r\n                      <MenuItem value=\"\">All</MenuItem>\r\n                      <MenuItem value=\"onSite\">On Site</MenuItem>\r\n                      <MenuItem value=\"workFromHome\">Work From Home</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n\r\n                  {/* Job Type Filter */}\r\n                  <Typography variant=\"h6\">Job Type</Typography>\r\n                  <FormControl className={styles.formElement}>\r\n                    <InputLabel htmlFor=\"filterJobType\">\r\n                      Select Job Type\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"filterJobType-label\"\r\n                      id=\"filterJobType\"\r\n                      value={filterJobType || \"\"}\r\n                      onChange={(e) => setFilterJobType(e.target.value)}\r\n                      label=\"Select Job Type\"\r\n                    >\r\n                      <MenuItem value=\"\">All</MenuItem>\r\n                      <MenuItem value=\"fullTime\">Full Time</MenuItem>\r\n                      <MenuItem value=\"partTime\">Part Time</MenuItem>\r\n                      <MenuItem value=\"contract\">Contract</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n\r\n                  {/* Salary Filter */}\r\n                  <Typography variant=\"h6\">Salary</Typography>\r\n                  <div className={styles.sliderContainer}>\r\n                    <Slider\r\n                      value={filterSalary}\r\n                      onChange={(event, newValue) => setFilterSalary(newValue)}\r\n                      valueLabelDisplay=\"auto\"\r\n                      min={10000}\r\n                      max={100000}\r\n                      step={10000}\r\n                    />\r\n                  </div>\r\n\r\n                  {/* Duration Filter */}\r\n                  <Typography variant=\"h6\">Duration</Typography>\r\n                  <div className={styles.sliderContainer}>\r\n                    <Slider\r\n                      value={filterDuration}\r\n                      onChange={(event, newValue) =>\r\n                        setFilterDuration(newValue)\r\n                      }\r\n                      valueLabelDisplay=\"auto\"\r\n                      min={1}\r\n                      max={12}\r\n                      step={1}\r\n                    />\r\n                  </div>\r\n\r\n                  {/* Title Filter */}\r\n                  <Typography variant=\"h6\">Title</Typography>\r\n                  <div className={styles.formElement}>\r\n                    <TextField\r\n                      label=\"Select Title\"\r\n                      select\r\n                      value={filterTitle || \"\"}\r\n                      onChange={(e) => setFilterTitle(e.target.value)}\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                    >\r\n                      <MenuItem value=\"\">All</MenuItem>\r\n                      <MenuItem value=\"Video Editor\">Video Editor</MenuItem>\r\n                      <MenuItem value=\"Graphic Designer\">Designer</MenuItem>\r\n                      <MenuItem value=\"Sound Engineer\">Sound Engineer</MenuItem>\r\n                      {/* Add more titles as needed */}\r\n                    </TextField>\r\n                  </div>\r\n\r\n                  {/* Add other filters as needed */}\r\n                </DialogContent>\r\n              </div>\r\n\r\n              <div className={styles.applyButtonContainer}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleApplyFilters}\r\n                >\r\n                  Apply\r\n                </Button>\r\n              </div>\r\n            </Dialog>\r\n            {/* SOP Dialog */}\r\n            <Dialog\r\n              open={sopDialogVisible}\r\n              onClose={() => setSopDialogVisible(false)}\r\n              className={styles.dialogContainer}\r\n            >\r\n              <div className={styles.filterContainer}>\r\n                <DialogTitle>Write Your Statement of Purpose (SOP)</DialogTitle>\r\n                <DialogContent className={styles.dialogContent}>\r\n                  <TextField\r\n                    label=\"SOP\"\r\n                    multiline\r\n                    rows={4}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    value={sopText}\r\n                    onChange={(e) => setSopText(e.target.value)}\r\n                  />\r\n                </DialogContent>\r\n              </div>\r\n\r\n              <div className={styles.applyButtonContainer}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  className={styles.sop}\r\n                  onClick={handleApplySop}\r\n                >\r\n                  Apply\r\n                </Button>\r\n              </div>\r\n            </Dialog>\r\n          </div>\r\n        ) : (\r\n          <img src={noData} className={styles.noData}/>\r\n        )}\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Jobs;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}