{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardFreelancer = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8001/jobs/getjobs\", {\n          withCredentials: true\n        });\n        const jobsData = response.data;\n        if (Array.isArray(jobsData.jobs)) {\n          setJobs(jobsData.jobs);\n        } else {\n          console.error('Invalid data received from the API:', jobsData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching jobs:\", error);\n      }\n    };\n    fetchJobs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(DashboardFreelancer, \"Q0mbvptFv5mszAZqWDb/1cpBDtw=\");\n_c = DashboardFreelancer;\nexport default DashboardFreelancer;\nvar _c;\n$RefreshReg$(_c, \"DashboardFreelancer\");","map":{"version":3,"names":["React","useEffect","useState","axios","Fragment","_Fragment","jsxDEV","_jsxDEV","DashboardFreelancer","_s","jobs","setJobs","fetchJobs","response","get","withCredentials","jobsData","data","Array","isArray","console","error","_c","$RefreshReg$"],"sources":["D:/Gyanshu/webd/projects/retrocraft-hub/frontend/src/pages/dashboard/DashboardFreelancer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst DashboardFreelancer = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchJobs = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:8001/jobs/getjobs\", {\r\n          withCredentials: true\r\n        });\r\n\r\n        const jobsData = response.data;\r\n\r\n        if (Array.isArray(jobsData.jobs)) {\r\n          setJobs(jobsData.jobs);\r\n        } else {\r\n          console.error('Invalid data received from the API:', jobsData);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching jobs:\", error);\r\n      }\r\n    };\r\n\r\n    fetchJobs();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    </>\r\n    \r\n  );\r\n};\r\n\r\nexport default DashboardFreelancer;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,oCAAoC,EAAE;UACrEC,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,IAAI;QAE9B,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAACN,IAAI,CAAC,EAAE;UAChCC,OAAO,CAACK,QAAQ,CAACN,IAAI,CAAC;QACxB,CAAC,MAAM;UACLU,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEL,QAAQ,CAAC;QAChE;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDT,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA,CAAAF,SAAA,mBACE,CAAC;AAGP,CAAC;AAACI,EAAA,CA9BID,mBAAmB;AAAAc,EAAA,GAAnBd,mBAAmB;AAgCzB,eAAeA,mBAAmB;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}